package com.sonar.it.csharp;

import com.sonar.orchestrator.Orchestrator;
import org.junit.Before;
import org.junit.ClassRule;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;

import java.io.IOException;
import java.nio.file.Path;

import static com.sonar.it.csharp.Tests.getMeasureAsInt;
import static org.assertj.core.api.Assertions.assertThat;

public class AutoGeneratedTest {

    @ClassRule
    public static final Orchestrator orchestrator = Tests.ORCHESTRATOR;

    @Rule
    public TemporaryFolder temp = new TemporaryFolder();

    @Before
    public void init() throws Exception {
        orchestrator.resetData();
    }

    @Test
    public void autogenerated_code_reports_no_bugs() throws Exception {
        final String PROJECT_NAME = "AutoGeneratedFiles";
        analyzeCoverageTestProject(PROJECT_NAME);

        assertThat(getMeasureAsInt(PROJECT_NAME, "files")).isEqualTo(17);
        assertThat(getMeasureAsInt(PROJECT_NAME, "new_bugs")).isNull();
    }

    @Test
    public void non_autogenerated_code_reports_bugs() throws Exception {
        final String PROJECT_NAME = "NotAutoGeneratedFiles";
        analyzeCoverageTestProject(PROJECT_NAME);

        assertThat(getMeasureAsInt(PROJECT_NAME, "ncloc")).isEqualTo(29);
        assertThat(getMeasureAsInt(PROJECT_NAME, "bugs")).isEqualTo(1);
    }

    private void analyzeCoverageTestProject(String projectName, String... keyValues) throws IOException {
        Path projectDir = Tests.projectDir(temp, projectName);
        orchestrator.executeBuild(Tests.newScanner(projectDir)
                .addArgument("begin")
                .setProjectKey(projectName)
                .setProjectName(projectName)
                .setProjectVersion("1.0")
                .setProperties(keyValues));

        Tests.runMSBuild(orchestrator, projectDir, "/t:Rebuild");

        orchestrator.executeBuild(Tests.newScanner(projectDir)
                .addArgument("end"));
    }
}
